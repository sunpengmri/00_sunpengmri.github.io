1. 新建仓库的方式
    $ git init
    $ git add .
    $ git commit -m "提交信息"
    $ git remote add origin 'https://github.com/sunpengmri/fsl_diffusion_no_tp.git' # 这个需要在github新建repo
    $ git push -u origin main
2. 第二次就简单
    $ git add .
    $ git commit -m "提交信息"
    $ git push

3. git status
   git diff


10. git 配置 Github：
    生成SSH的key
    首先输入命令ssh-keygen -t rsa -C "sunpengwipm@whu.edu.cn"，其中引号里面的是你GitHub注册时候的邮箱，然后它会提示你rsa key的保存地方，直接回车就行，然后还让你输入密码，不想输就一路回车，最后有个public key要注意，这个待会儿会用到。
    在git中配置全局的github账号信息：
    git config --global user.name "sunpengmri"
    git config --global user.email "sunpengwipm@whu.edu.cn"
    登录github账号，依次点击下图中加红框菜单：  setting-SSH-添加Key 
    修改当前仓库的默认url为ssh的url：
    url = git@github.com:sunpengmri/sunpengmri.github.io.git


11. github 访问技巧(win)
  a:修改DNS，系统偏好设置->网络->高级->DNS-> + -> 114.114.114.114 and 8.8.8.8
  b:修改hosts：sudo vim/etc/hosts -> www.ipaddress.com ->github.com and github.global.ssl.fastly.net
  c:刷新DNS：sudo killall -HUP mDNSResponder

12. 回退commit：
    1.查看提交历史： 首先，你需要查看项目的提交历史，找到你想要回滚到的那个提交的哈希值。可以使用以下命令：
    git log

    $ git reset --hard HEAD^        回退到上个版本
    $ git reset --hard HEAD~3       回退到前3次提交之前，以此类推，回退到n次提交之前
    $ git reset --hard commit_id    退到/进到 指定commit的sha码

    –soft：回滚到某个提交，但保留工作区和暂存区的改动，只是撤销了提交记录。这意味着你还可以重新提交这些改动。
    –mixed（默认）：回滚到某个提交，并更新暂存区，但不改变工作区。这意味着你需要在工作区手动撤销改动。
    –hard：彻底回滚到某个提交，包括工作区、暂存区和版本库。这会删除回滚点之后的提交记录，所以使用时要特别小心。

    $ git reset --hard HEAD^        回退到上个版本
    $ git reset --hard HEAD~3       回退到前3次提交之前，以此类推，回退到n次提交之前
    $ git reset --hard commit_id    退到/进到 指定commit的sha码

    这样，本地代码就回退到了正确版本。但是，远程仓库还是错误版本。需要使用git push命令强制推送回退后的代码：
    git push -f


13. branch
    1.查看本地分支
    git branch

    2.查看本地分支+上次提交的信息
    git branch -v

    3.查看本地分支+上次提交的信息+本地和远程分支的关系
    git branch -vv

    4.查看本地分支+上次提交的信息+本地和远程分支的关系+远程分支
    git branch -vv -a

    5.只查看远程分支
    git branch -r

    6.删除本地分支
    git branch -d (branchName)

    7.删除远程分支
    git push <主机名> -d <分支名>
    或者
    git push <主机名> --delete <分支名>
    或者
    git push <主机名> :<分支名>

    8.切换本地分支
    git checkout (branchName)

    9.创建本地分支
    git branch (branchName) //创建本地分支
    或者
    git checkout -b (branchName) //创建本地分支并切换

    10.创建远程分支
    git push <远程主机名> <本地分支名>:<远程分支名>

    11.合并分支
    git merge (branchName)
    git status

14. 拷贝diff文件
    git archive -o update.zip HEAD $(git diff HEAD base --name-only)

15. 







